# setup_whatsapp.py - Asistente completo de configuraci√≥n WhatsApp Business
import os
import sys
import json
import requests
from pathlib import Path

class WhatsAppSetupWizard:
    def __init__(self):
        self.config = {}
        self.project_root = Path.cwd()
        
    def welcome(self):
        """Mensaje de bienvenida"""
        print("=" * 70)
        print("üì± CONFIGURADOR DE WHATSAPP BUSINESS API")
        print("=" * 70)
        print("Este asistente configurar√° WhatsApp Business para enviar:")
        print("üìä Reportes mensuales autom√°ticos")
        print("‚ö†Ô∏è Alertas de operadores inactivos") 
        print("üèÜ Estad√≠sticas de equipos top")
        print("üí∞ An√°lisis de costos")
        print("üìã Archivos Excel por WhatsApp")
        print("-" * 70)
        print("\nüìã REQUISITOS PREVIOS:")
        print("1. Cuenta de Meta Business (Facebook)")
        print("2. N√∫mero de tel√©fono verificado")
        print("3. WhatsApp Business API configurada")
        print("4. Access token permanente")
        print("-" * 70)

    def check_prerequisites(self):
        """Verifica los requisitos previos"""
        print("\n‚úÖ VERIFICACI√ìN DE REQUISITOS")
        print("-" * 30)
        
        requirements = [
            "¬øTienes una cuenta de Meta Business? (s/n): ",
            "¬øTu n√∫mero de WhatsApp est√° verificado en Meta? (s/n): ",
            "¬øHas configurado WhatsApp Business API? (s/n): ",
            "¬øTienes un Access Token permanente? (s/n): "
        ]
        
        for req in requirements:
            response = input(req).lower()
            if not response.startswith('s'):
                print("‚ùå Requisito no cumplido")
                print("\nüìñ GU√çA DE CONFIGURACI√ìN:")
                print("1. Ve a: https://business.facebook.com/")
                print("2. Configura WhatsApp Business API")
                print("3. Verifica tu n√∫mero de tel√©fono")
                print("4. Genera un Access Token permanente")
                print("5. Ejecuta este script nuevamente")
                return False
        
        print("‚úÖ Todos los requisitos cumplidos")
        return True

    def get_whatsapp_credentials(self):
        """Obtiene las credenciales de WhatsApp Business API"""
        print("\nüîë CREDENCIALES DE WHATSAPP BUSINESS API")
        print("-" * 45)
        print("Necesitas esta informaci√≥n de tu cuenta de Meta Business:")
        print("1. Phone Number ID (de WhatsApp Business API)")
        print("2. Access Token (permanente, no temporal)")
        print("3. Webhook Verify Token (lo defines t√∫)")
        
        self.config['phone_number_id'] = input("\nPhone Number ID: ").strip()
        self.config['access_token'] = input("Access Token: ").strip()
        self.config['verify_token'] = input("Webhook Verify Token (ej: mi_token_secreto): ").strip()
        
        if not all([
            self.config['phone_number_id'], 
            self.config['access_token'], 
            self.config['verify_token']
        ]):
            print("‚ùå Todas las credenciales son obligatorias")
            return False
        
        return True

    def test_whatsapp_api(self):
        """Prueba las credenciales de WhatsApp API"""
        print("\nüîç PROBANDO CREDENCIALES...")
        print("-" * 30)
        
        try:
            # Probar con una consulta b√°sica a la API
            url = f"https://graph.facebook.com/v18.0/{self.config['phone_number_id']}"
            headers = {
                'Authorization': f"Bearer {self.config['access_token']}"
            }
            
            response = requests.get(url, headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Credenciales v√°lidas")
                print(f"üì± N√∫mero verificado: {data.get('display_phone_number', 'N/A')}")
                print(f"üè¢ Nombre de negocio: {data.get('name', 'N/A')}")
                return True
            else:
                print(f"‚ùå Error de API: {response.status_code}")
                print(f"   Respuesta: {response.text}")
                return False
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Error de conexi√≥n: {e}")
            return False
        except Exception as e:
            print(f"‚ùå Error inesperado: {e}")
            return False

    def configure_webhook(self):
        """Configura informaci√≥n del webhook"""
        print("\nüîó CONFIGURACI√ìN DE WEBHOOK")
        print("-" * 30)
        print("El webhook permite que WhatsApp env√≠e notificaciones a tu aplicaci√≥n.")
        
        # Obtener dominio base
        domain = input("Dominio de tu aplicaci√≥n (ej: https://mi-app.com): ").strip()
        if not domain.startswith('http'):
            domain = 'https://' + domain
        
        self.config['webhook_url'] = f"{domain}/webhook/whatsapp/"
        self.config['domain'] = domain
        
        print(f"üìç URL del webhook: {self.config['webhook_url']}")
        print("\n‚ö†Ô∏è IMPORTANTE:")
        print(f"   1. Configura esta URL en Meta Business:")
        print(f"      {self.config['webhook_url']}")
        print(f"   2. Usa este Verify Token: {self.config['verify_token']}")
        print(f"   3. Suscr√≠bete a: messages, message_deliveries")
        
        return True

    def get_contact_configuration(self):
        """Configura los contactos que recibir√°n reportes"""
        print("\nüë• CONFIGURACI√ìN DE CONTACTOS")
        print("-" * 35)
        
        contacts = []
        print("Agrega contactos que recibir√°n reportes por WhatsApp:")
        print("(Formato: +52XXXXXXXXXX para M√©xico)")
        
        while True:
            print(f"\nContacto {len(contacts) + 1}:")
            name = input("  Nombre (Enter para terminar): ").strip()
            if not name:
                break
            
            number = input("  N√∫mero WhatsApp (+52XXXXXXXXXX): ").strip()
            if not number:
                continue
            
            # Limpiar n√∫mero
            clean_number = ''.join(filter(str.isdigit, number))
            if len(clean_number) == 10:
                clean_number = '52' + clean_number
            elif not clean_number.startswith('52'):
                clean_number = '52' + clean_number[-10:]
            
            role_options = {
                '1': 'manager',
                '2': 'supervisor', 
                '3': 'admin',
                '4': 'operator'
            }
            
            print("  Rol:")
            for key, role in role_options.items():
                print(f"    {key}. {role.title()}")
            
            role_choice = input("  Selecciona rol (1-4): ").strip()
            role = role_options.get(role_choice, 'operator')
            
            receive_reports = input("  ¬øRecibir reportes mensuales? (s/n): ").lower().startswith('s')
            receive_alerts = input("  ¬øRecibir alertas? (s/n): ").lower().startswith('s')
            
            contacts.append({
                'name': name,
                'number': f"+{clean_number}",
                'role': role,
                'receive_reports': receive_reports,
                'receive_alerts': receive_alerts
            })
            
            print(f"  ‚úÖ {name} agregado")
        
        self.config['contacts'] = contacts
        
        if not contacts:
            print("‚ö†Ô∏è No se agregaron contactos")
            print("   Podr√°s agregar contactos despu√©s usando el admin de Django")
        
        return True

    def send_test_message(self):
        """Env√≠a mensaje de prueba a los contactos"""
        if not self.config.get('contacts'):
            print("‚ö†Ô∏è No hay contactos para probar")
            return True
        
        test = input("\n¬øEnviar mensaje de prueba a los contactos? (s/n): ").lower().startswith('s')
        if not test:
            return True
        
        print("\nüì§ ENVIANDO MENSAJES DE PRUEBA...")
        print("-" * 40)
        
        try:
            url = f"https://graph.facebook.com/v18.0/{self.config['phone_number_id']}/messages"
            headers = {
                'Authorization': f"Bearer {self.config['access_token']}",
                'Content-Type': 'application/json'
            }
            
            sent_count = 0
            for contact in self.config['contacts']:
                # Mensaje de prueba personalizado
                message = f"ü§ñ *Mensaje de Prueba*\n\nHola {contact['name']}, el Sistema de Combustible est√° configurado correctamente ‚úÖ\n\nRecibir√°s:\n"
                
                if contact['receive_reports']:
                    message += "üìä Reportes mensuales\n"
                if contact['receive_alerts']:
                    message += "‚ö†Ô∏è Alertas importantes\n"
                
                message += "\n¬°Sistema listo para funcionar!"
                
                payload = {
                    "messaging_product": "whatsapp",
                    "to": contact['number'].replace('+', ''),
                    "type": "text",
                    "text": {"body": message}
                }
                
                response = requests.post(url, headers=headers, json=payload)
                
                if response.status_code == 200:
                    sent_count += 1
                    print(f"   ‚úÖ Enviado a {contact['name']} ({contact['number']})")
                else:
                    print(f"   ‚ùå Error enviando a {contact['name']}: {response.text}")
            
            print(f"\nüì± Mensajes enviados: {sent_count}/{len(self.config['contacts'])}")
            return True
            
        except Exception as e:
            print(f"‚ùå Error enviando mensajes de prueba: {e}")
            return False

    def update_env_file(self):
        """Actualiza el archivo .env"""
        print("\nüìù ACTUALIZANDO ARCHIVO .ENV")
        print("-" * 30)
        
        env_file = self.project_root / '.env'
        env_content = []
        
        # Leer archivo existente
        if env_file.exists():
            with open(env_file, 'r') as f:
                existing_lines = f.readlines()
            
            # Filtrar l√≠neas de WhatsApp existentes
            whatsapp_keys = [
                'WHATSAPP_PHONE_NUMBER_ID', 'WHATSAPP_ACCESS_TOKEN', 
                'WHATSAPP_VERIFY_TOKEN', 'WHATSAPP_WEBHOOK_URL'
            ]
            
            for line in existing_lines:
                if not any(key in line for key in whatsapp_keys):
                    env_content.append(line.strip())
        
        # Agregar configuraci√≥n de WhatsApp
        env_content.extend([
            "",
            "# === WHATSAPP BUSINESS API CONFIGURATION ===",
            f"WHATSAPP_PHONE_NUMBER_ID={self.config['phone_number_id']}",
            f"WHATSAPP_ACCESS_TOKEN={self.config['access_token']}",
            f"WHATSAPP_VERIFY_TOKEN={self.config['verify_token']}",
            f"WHATSAPP_WEBHOOK_URL={self.config['webhook_url']}",
        ])
        
        # Escribir archivo
        with open(env_file, 'w') as f:
            f.write('\n'.join(env_content))
        
        print(f"‚úÖ Archivo .env actualizado")
        return True

    def create_contacts_in_db(self):
        """Crea los contactos en la base de datos"""
        print("\nüë• CREANDO CONTACTOS EN BASE DE DATOS")
        print("-" * 40)
        
        if not self.config.get('contacts'):
            print("‚ö†Ô∏è No hay contactos para crear")
            return True
        
        # Generar script de migraci√≥n
        migration_script = f"""
# Script para crear contactos de WhatsApp
# Ejecutar con: python manage.py shell < create_whatsapp_contacts.py

from tu_app.models import WhatsAppContact

print("üì± Creando contactos de WhatsApp...")

contacts_data = {json.dumps(self.config['contacts'], indent=2)}

created_count = 0
for contact_data in contacts_data:
    contact, created = WhatsAppContact.objects.get_or_create(
        phone_number=contact_data['number'],
        defaults={{
            'name': contact_data['name'],
            'role': contact_data['role'],
            'receive_monthly_reports': contact_data['receive_reports'],
            'receive_alerts': contact_data['receive_alerts'],
            'active': True
        }}
    )
    
    if created:
        created_count += 1
        print(f"‚úÖ Creado: {{contact.name}} ({{contact.phone_number}})")
    else:
        print(f"‚ö†Ô∏è Ya existe: {{contact.name}} ({{contact.phone_number}})")

print(f"\\nüìä Total contactos creados: {{created_count}}")
"""
        
        script_file = self.project_root / 'create_whatsapp_contacts.py'
        with open(script_file, 'w') as f:
            f.write(migration_script)
        
        print(f"‚úÖ Script creado: {script_file}")
        print("üìã Para crear los contactos, ejecuta:")
        print(f"   python manage.py shell < {script_file}")
        
        return True

    def update_settings(self):
        """Actualiza settings.py con configuraci√≥n de WhatsApp"""
        print("\n‚öôÔ∏è ACTUALIZANDO SETTINGS.PY")
        print("-" * 30)
        
        # Buscar archivo settings.py
        settings_files = ['settings.py', 'config/settings.py']
        settings_path = None
        
        for settings_file in settings_files:
            if os.path.exists(settings_file):
                settings_path = settings_file
                break
        
        if not settings_path:
            print("‚ùå No se encontr√≥ settings.py")
            return False
        
        # Configuraci√≥n a agregar
        whatsapp_config = '''
# === WHATSAPP BUSINESS API CONFIGURATION ===
from decouple import config

# Credenciales de WhatsApp Business API
WHATSAPP_PHONE_NUMBER_ID = config('WHATSAPP_PHONE_NUMBER_ID', default='')
WHATSAPP_ACCESS_TOKEN = config('WHATSAPP_ACCESS_TOKEN', default='')
WHATSAPP_VERIFY_TOKEN = config('WHATSAPP_VERIFY_TOKEN', default='whatsapp_webhook_verify')

# Configuraci√≥n de webhook
WHATSAPP_WEBHOOK_URL = config('WHATSAPP_WEBHOOK_URL', default='/webhook/whatsapp/')

# Configuraci√≥n de plantillas
WHATSAPP_TEMPLATES = {
    'monthly_report': 'monthly_report_notification',
    'inactive_alert': 'inactive_operators_alert',
}

# L√≠mites de env√≠o
WHATSAPP_DAILY_LIMIT = 1000  # Mensajes por d√≠a
WHATSAPP_RATE_LIMIT = 20     # Mensajes por minuto

# Logging para WhatsApp
if 'LOGGING' in locals():
    LOGGING['loggers']['whatsapp'] = {
        'handlers': ['file', 'console'],
        'level': 'INFO',
        'propagate': True,
    }
'''
        
        try:
            # Leer archivo actual
            with open(settings_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Verificar si ya existe configuraci√≥n
            if 'WHATSAPP BUSINESS API CONFIGURATION' in content:
                print("‚ö†Ô∏è La configuraci√≥n de WhatsApp ya existe")
                overwrite = input("¬øSobrescribir? (s/n): ").lower().startswith('s')
                if not overwrite:
                    return True
                
                # Eliminar configuraci√≥n anterior
                lines = content.split('\n')
                filtered_lines = []
                skip_section = False
                
                for line in lines:
                    if '=== WHATSAPP BUSINESS API CONFIGURATION ===' in line:
                        skip_section = True
                        continue
                    elif skip_section and (not line.strip() or line.startswith('#') or '=' in line):
                        continue
                    else:
                        skip_section = False
                        filtered_lines.append(line)
                
                content = '\n'.join(filtered_lines)
            
            # Agregar nueva configuraci√≥n
            content += whatsapp_config
            
            # Escribir archivo
            with open(settings_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"‚úÖ Settings.py actualizado")
            return True
            
        except Exception as e:
            print(f"‚ùå Error actualizando settings.py: {e}")
            return False

    def create_deployment_guide(self):
        """Crea gu√≠a de despliegue y uso"""
        print("\nüìñ CREANDO GU√çA DE DESPLIEGUE")
        print("-" * 30)
        
        guide_content = f'''# GU√çA DE WHATSAPP BUSINESS API - SISTEMA DE COMBUSTIBLE

## üéâ Configuraci√≥n Completada

### Credenciales Configuradas:
- Phone Number ID: {self.config['phone_number_id']}
- Access Token: {self.config['access_token'][:10]}...
- Webhook URL: {self.config['webhook_url']}
- Verify Token: {self.config['verify_token']}

### Contactos Configurados:
{len(self.config.get('contacts', []))} contactos agregados para recibir reportes

## üìã Pr√≥ximos Pasos

### 1. Configurar Webhook en Meta Business
```
1. Ve a: https://developers.facebook.com/apps/
2. Selecciona tu app de WhatsApp Business
3. Ve a: WhatsApp > Configuration
4. Webhook URL: {self.config['webhook_url']}
5. Verify Token: {self.config['verify_token']}
6. Suscripciones: messages, message_deliveries, message_statuses
```

### 2. Crear Contactos en Django
```bash
python manage.py shell < create_whatsapp_contacts.py
```

### 3. Probar Configuraci√≥n
```bash
# Probar conexi√≥n b√°sica
python manage.py send_whatsapp_test --number +5215512345678

# Probar con todos los contactos
python manage.py send_whatsapp_test --all

# Sincronizar con operadores existentes
python manage.py sync_whatsapp_contacts
```

### 4. Enviar Reporte de Prueba
```bash
# Solo por WhatsApp
python manage.py enviar_reporte_mensual --test --whatsapp-only

# Por email y WhatsApp
python manage.py enviar_reporte_mensual --test --send-whatsapp
```

## üöÄ Funcionalidades Implementadas

### üìä Reportes Autom√°ticos
‚úÖ **Resumen Ejecutivo**: Estad√≠sticas principales del mes
‚úÖ **Archivo Excel**: Documento completo por WhatsApp  
‚úÖ **Top Equipos**: Ranking de veh√≠culos m√°s activos
‚úÖ **An√°lisis de Costos**: Desglose detallado de gastos
‚úÖ **Mensajes Interactivos**: Botones para m√°s informaci√≥n

### ‚ö†Ô∏è Alertas Inteligentes
‚úÖ **Operadores Inactivos**: Notificaci√≥n autom√°tica
‚úÖ **Equipos sin Uso**: Alertas de veh√≠culos sin actividad
‚úÖ **Gastos Elevados**: Notificaciones de consumo alto
‚úÖ **Respuestas Autom√°ticas**: Bot b√°sico para consultas

### üì± Gesti√≥n de Contactos
‚úÖ **Contactos por Rol**: Manager, Supervisor, Operador, Admin
‚úÖ **Preferencias Personalizadas**: Reportes, alertas, res√∫menes
‚úÖ **Sincronizaci√≥n**: Integraci√≥n con operadores del sistema
‚úÖ **Estado de Mensajes**: Tracking de entrega y lectura

## üîß Comandos √ötiles

### Gesti√≥n de Contactos
```bash
# Listar contactos
python manage.py manage_whatsapp_contacts --list

# Agregar contacto
python manage.py manage_whatsapp_contacts --add "Juan P√©rez,+5215512345678,manager"

# Habilitar reportes
python manage.py manage_whatsapp_contacts --enable-reports +5215512345678

# Enviar mensaje de prueba
python manage.py manage_whatsapp_contacts --test +5215512345678
```

### Reportes y Alertas
```bash
# Reporte mensual completo
python manage.py enviar_reporte_mensual --send-whatsapp

# Solo alertas de operadores inactivos
python manage.py enviar_reporte_mensual --whatsapp-only --mes 11

# Reporte a n√∫mero espec√≠fico
python manage.py enviar_reporte_mensual --whatsapp +5215512345678
```

### Mantenimiento
```bash
# Ver estad√≠sticas de mensajes
python manage.py whatsapp_stats

# Limpiar logs antiguos
python manage.py cleanup_whatsapp_logs --days 30

# Verificar configuraci√≥n
python manage.py check_whatsapp_config
```

## üéØ Tipos de Mensajes Autom√°ticos

### 1. Reporte Mensual (D√≠a 1 de cada mes)
- üìä Resumen ejecutivo con estad√≠sticas principales
- üìÑ Archivo Excel con datos completos
- üèÜ Top 5 equipos m√°s activos
- üë• Lista de operadores inactivos
- üí∞ An√°lisis de costos y eficiencia

### 2. Alertas Inmediatas
- ‚ö†Ô∏è Operadores sin actividad por m√°s de 7 d√≠as
- üö® Equipos con gastos an√≥malos
- üìà Consumo por encima del promedio
- üîß Recordatorios de mantenimiento

### 3. Respuestas Autom√°ticas
- ü§ñ Comandos b√°sicos (/reporte, /equipos, /ayuda)
- üìã Consultas de estado
- üîç B√∫squeda de informaci√≥n
- üìû Escalaci√≥n a administradores

## ‚öôÔ∏è Configuraci√≥n Avanzada

### Personalizar Mensajes
Edita los templates en `whatsapp_service.py`:
- `_generate_summary_message()`: Resumen del reporte
- `send_alert_inactive_operators()`: Alerta de operadores
- `send_cost_analysis()`: An√°lisis de costos

### Agregar Nuevos Tipos de Alerta
1. Crea funci√≥n en `WhatsAppReportService`
2. Agrega l√≥gica en el comando de reportes
3. Configura triggers en los modelos

### Webhooks Personalizados
Modifica `WhatsAppWebhookView` para:
- Procesar respuestas espec√≠ficas
- Manejar botones interactivos
- Implementar conversaciones

## üîí Seguridad y L√≠mites

### L√≠mites de WhatsApp Business API
- **Mensajes por d√≠a**: 1,000 (configurable)
- **Mensajes por minuto**: 20 (configurable)
- **Tama√±o de archivos**: 100MB m√°ximo
- **Tipos de archivo**: PDF, Excel, im√°genes

### Buenas Pr√°cticas
- ‚úÖ No enviar spam o mensajes no solicitados
- ‚úÖ Respetar horarios comerciales
- ‚úÖ Ofrecer opci√≥n de darse de baja
- ‚úÖ Mantener mensajes relevantes y √∫tiles

## üÜò Soluci√≥n de Problemas

### Error "Invalid Access Token"
- Verifica que el token sea permanente, no temporal
- Renueva el token en Meta Business
- Confirma permisos de WhatsApp Business API

### Mensajes No Se Entregan
- Verifica que los n√∫meros est√©n en formato internacional
- Confirma que WhatsApp Business est√© activo
- Revisa l√≠mites de env√≠o diarios/por minuto

### Webhook No Funciona
- Verifica que la URL sea p√∫blica y accesible
- Confirma certificado SSL v√°lido
- Revisa que el verify token coincida

### Contactos No Reciben Mensajes
- Confirma que `active=True` y `receive_monthly_reports=True`
- Verifica formato de n√∫mero de tel√©fono
- Revisa logs de mensajes en Django Admin

## üìû Soporte

- **Documentaci√≥n WhatsApp**: https://developers.facebook.com/docs/whatsapp
- **Meta Business**: https://business.facebook.com/
- **Logs del Sistema**: Django Admin > WhatsApp Messages
- **Contacto T√©cnico**: admin@tuempresa.com

## üîÑ Automatizaci√≥n Completa

Con esta configuraci√≥n, el sistema enviar√° autom√°ticamente:

üìÖ **D√≠a 1 de cada mes a las 8:00 AM**:
- Reporte mensual completo por WhatsApp
- Archivo Excel con todos los datos
- Alertas de operadores inactivos
- An√°lisis de equipos top

üîî **Alertas en tiempo real**:
- Notificaciones de actividad an√≥mala
- Recordatorios de mantenimiento
- Escalaciones autom√°ticas

¬°Tu sistema de combustible ahora incluye comunicaci√≥n inteligente por WhatsApp! üéâ
'''
        
        with open('WHATSAPP_DEPLOYMENT_GUIDE.md', 'w', encoding='utf-8') as f:
            f.write(guide_content)
        
        print("‚úÖ Gu√≠a creada: WHATSAPP_DEPLOYMENT_GUIDE.md")
        return True

    def run(self):
        """Ejecuta el asistente completo"""
        self.welcome()
        
        if not self.check_prerequisites():
            return False
        
        steps = [
            ("Obtener Credenciales", self.get_whatsapp_credentials),
            ("Probar API", self.test_whatsapp_api),
            ("Configurar Webhook", self.configure_webhook),
            ("Configurar Contactos", self.get_contact_configuration),
            ("Enviar Pruebas", self.send_test_message),
            ("Actualizar .env", self.update_env_file),
            ("Actualizar Settings", self.update_settings),
            ("Crear Script de Contactos", self.create_contacts_in_db),
            ("Crear Gu√≠a", self.create_deployment_guide),
        ]
        
        for step_name, step_func in steps:
            print(f"\nüîÑ {step_name}...")
            if not step_func():
                print(f"‚ùå Error en: {step_name}")
                return False
        
        print("\n" + "=" * 70)
        print("üéâ ¬°WHATSAPP BUSINESS API CONFIGURADO EXITOSAMENTE!")
        print("=" * 70)
        
        print(f"\nüìã RESUMEN DE CONFIGURACI√ìN:")
        print(f"   ‚Ä¢ Phone Number ID: {self.config['phone_number_id']}")
        print(f"   ‚Ä¢ Webhook URL: {self.config['webhook_url']}")
        print(f"   ‚Ä¢ Contactos configurados: {len(self.config.get('contacts', []))}")
        
        print(f"\nüöÄ PR√ìXIMOS PASOS:")
        print("   1. Configura el webhook en Meta Business Manager")
        print("   2. python manage.py shell < create_whatsapp_contacts.py")
        print("   3. python manage.py send_whatsapp_test --all")
        print("   4. python manage.py enviar_reporte_mensual --test --whatsapp-only")
        print("   5. Lee: WHATSAPP_DEPLOYMENT_GUIDE.md")
        
        print(f"\nüí° COMANDOS √öTILES:")
        print("   ‚Ä¢ python manage.py manage_whatsapp_contacts --list")
        print("   ‚Ä¢ python manage.py send_whatsapp_test --number +5215512345678")
        print("   ‚Ä¢ python manage.py enviar_reporte_mensual --whatsapp-only")
        
        print(f"\nüîó ENLACES IMPORTANTES:")
        print("   ‚Ä¢ Meta Business: https://business.facebook.com/")
        print("   ‚Ä¢ WhatsApp API Docs: https://developers.facebook.com/docs/whatsapp")
        print("   ‚Ä¢ Webhook Config: https://developers.facebook.com/apps/")
        
        return True

def main():
    """Funci√≥n principal"""
    wizard = WhatsAppSetupWizard()
    success = wizard.run()
    
    if success:
        print("\n‚úÖ ¬°Configuraci√≥n exitosa!")
        print("üì± Tu sistema ahora enviar√° reportes por WhatsApp autom√°ticamente")
    else:
        print("\n‚ùå Configuraci√≥n incompleta")
        print("   Revisa los errores y ejecuta nuevamente")
    
    return success

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è Configuraci√≥n cancelada por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")

# === INSTRUCCIONES DE USO ===
"""
üöÄ GU√çA R√ÅPIDA DE CONFIGURACI√ìN:

1. **Ejecutar el asistente:**
   python setup_whatsapp.py

2. **Seguir los pasos del asistente:**
   - Verificar requisitos previos
   - Ingresar credenciales de Meta Business
   - Probar conexi√≥n a la API
   - Configurar webhook
   - Agregar contactos
   - Enviar mensajes de prueba

3. **Configurar webhook en Meta:**
   - Ve a developers.facebook.com
   - Configura la URL del webhook
   - Agrega el verify token
   - Suscr√≠bete a eventos

4. **Crear contactos en Django:**
   python manage.py shell < create_whatsapp_contacts.py

5. **Probar funcionalidad:**
   python manage.py send_whatsapp_test --all

6. **Enviar primer reporte:**
   python manage.py enviar_reporte_mensual --test --whatsapp-only

üéØ BENEFICIOS DESPU√âS DE LA CONFIGURACI√ìN:

‚úÖ **Reportes Autom√°ticos por WhatsApp**
   - Res√∫menes ejecutivos cada mes
   - Archivos Excel enviados directamente
   - Alertas de operadores inactivos
   - An√°lisis de costos y eficiencia

‚úÖ **Comunicaci√≥n Inteligente**
   - Mensajes personalizados por rol
   - Botones interactivos para m√°s info
   - Respuestas autom√°ticas a consultas
   - Tracking de entrega y lectura

‚úÖ **Gesti√≥n Centralizada**
   - Admin de Django para contactos
   - Logs de todos los mensajes
   - Estad√≠sticas de uso
   - Configuraci√≥n por rol y preferencias

‚úÖ **Integraci√≥n Perfecta**
   - Funciona con DigitalOcean Spaces
   - Se integra con sistema de reportes
   - Compatible con email simult√°neo
   - Automatizaci√≥n completa

üì± EL SISTEMA AHORA ENVIAR√Å AUTOM√ÅTICAMENTE:

‚Ä¢ **D√≠a 1 de cada mes**: Reporte completo con Excel
‚Ä¢ **Alertas inmediatas**: Operadores inactivos, gastos altos
‚Ä¢ **Respuestas autom√°ticas**: Comandos b√°sicos y ayuda
‚Ä¢ **Notificaciones**: Estados de equipos y mantenimiento

¬°Tu sistema de combustible ahora incluye WhatsApp Business! üéâ
"""