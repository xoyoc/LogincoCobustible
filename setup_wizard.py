# setup_wizard.py - Asistente de configuraci√≥n completo
import os
import sys
import getpass
import json
from pathlib import Path

class ReportSetupWizard:
    def __init__(self):
        self.config = {}
        self.project_root = Path.cwd()
        
    def welcome(self):
        """Mensaje de bienvenida"""
        print("=" * 70)
        print("üöÄ ASISTENTE DE CONFIGURACI√ìN - REPORTES DE COMBUSTIBLE")
        print("=" * 70)
        print("Este asistente te ayudar√° a configurar el sistema de reportes autom√°ticos.")
        print("üìß Los reportes se enviar√°n autom√°ticamente el d√≠a 1 de cada mes.")
        print("üìä Incluyen estad√≠sticas detalladas y archivo Excel adjunto.")
        print("-" * 70)
        
    def check_django_project(self):
        """Verifica que estemos en un proyecto Django"""
        manage_py = self.project_root / "manage.py"
        if not manage_py.exists():
            print("‚ùå Error: No se encontr√≥ manage.py")
            print("   Aseg√∫rate de ejecutar este script desde la ra√≠z del proyecto Django")
            return False
        
        print("‚úÖ Proyecto Django detectado")
        return True
    
    def get_email_config(self):
        """Obtiene la configuraci√≥n de email"""
        print("\nüìß CONFIGURACI√ìN DE EMAIL")
        print("-" * 30)
        
        # Proveedores comunes
        providers = {
            '1': {'name': 'Gmail', 'host': 'smtp.gmail.com', 'port': 587, 'tls': True},
            '2': {'name': 'Outlook/Hotmail', 'host': 'smtp-mail.outlook.com', 'port': 587, 'tls': True},
            '3': {'name': 'Yahoo', 'host': 'smtp.mail.yahoo.com', 'port': 587, 'tls': True},
            '4': {'name': 'Personalizado', 'host': '', 'port': 587, 'tls': True}
        }
        
        print("Selecciona tu proveedor de email:")
        for key, provider in providers.items():
            print(f"  {key}. {provider['name']}")
        
        choice = input("\nOpci√≥n (1-4): ").strip()
        
        if choice in providers:
            provider = providers[choice]
            
            if choice == '4':  # Personalizado
                self.config['email_host'] = input("Servidor SMTP: ").strip()
                self.config['email_port'] = int(input("Puerto (587): ").strip() or "587")
                self.config['email_use_tls'] = input("¬øUsar TLS? (s/n): ").lower().startswith('s')
            else:
                self.config['email_host'] = provider['host']
                self.config['email_port'] = provider['port']
                self.config['email_use_tls'] = provider['tls']
            
            self.config['email_user'] = input("Email de env√≠o: ").strip()
            
            if 'gmail' in self.config['email_host']:
                print("\nüí° Para Gmail, necesitas una 'App Password':")
                print("   1. Ve a https://myaccount.google.com/security")
                print("   2. Habilita 2-Step Verification")
                print("   3. Genera una App Password para 'Mail'")
                print("   4. Usa esa contrase√±a aqu√≠ (no tu contrase√±a normal)")
            
            self.config['email_password'] = getpass.getpass("Contrase√±a de email: ")
            
            return True
        else:
            print("‚ùå Opci√≥n no v√°lida")
            return False
    
    def get_recipients(self):
        """Obtiene la lista de destinatarios"""
        print("\nüë• DESTINATARIOS DEL REPORTE")
        print("-" * 30)
        
        recipients = []
        print("Ingresa los emails que recibir√°n el reporte (Enter para terminar):")
        
        while True:
            email = input(f"  Email {len(recipients) + 1}: ").strip()
            if not email:
                break
            
            if '@' in email and '.' in email:
                recipients.append(email)
                print(f"    ‚úÖ {email} agregado")
            else:
                print("    ‚ùå Email inv√°lido, intenta de nuevo")
        
        if not recipients:
            recipients = [self.config['email_user']]  # Usar email de env√≠o como fallback
            print(f"    ‚ö†Ô∏è No se agregaron destinatarios, usando: {self.config['email_user']}")
        
        self.config['recipients'] = recipients
        return True
    
    def create_directory_structure(self):
        """Crea la estructura de directorios necesaria"""
        print("\nüìÅ CREANDO ESTRUCTURA DE DIRECTORIOS")
        print("-" * 40)
        
        # Detectar la app principal
        apps = [d for d in os.listdir('.') if os.path.isdir(d) and 
                os.path.exists(os.path.join(d, 'models.py'))]
        
        if not apps:
            print("‚ùå No se encontraron apps de Django")
            return False
        
        if len(apps) == 1:
            app_name = apps[0]
        else:
            print("Apps encontradas:")
            for i, app in enumerate(apps, 1):
                print(f"  {i}. {app}")
            
            choice = input("Selecciona la app principal (n√∫mero): ").strip()
            try:
                app_name = apps[int(choice) - 1]
            except (ValueError, IndexError):
                print("‚ùå Selecci√≥n inv√°lida")
                return False
        
        self.config['app_name'] = app_name
        print(f"‚úÖ App seleccionada: {app_name}")
        
        # Crear directorios
        directories = [
            f"{app_name}/management",
            f"{app_name}/management/commands",
            "templates/emails"
        ]
        
        for directory in directories:
            path = Path(directory)
            path.mkdir(parents=True, exist_ok=True)
            
            # Crear __init__.py si no existe
            if 'management' in str(path):
                init_file = path / "__init__.py"
                if not init_file.exists():
                    init_file.touch()
        
        print("‚úÖ Estructura de directorios creada")
        return True
    
    def update_settings(self):
        """Actualiza el archivo settings.py"""
        print("\n‚öôÔ∏è ACTUALIZANDO CONFIGURACI√ìN")
        print("-" * 30)
        
        settings_files = ['settings.py', f'{self.config["app_name"]}/settings.py', 'config/settings.py']
        settings_path = None
        
        for settings_file in settings_files:
            if os.path.exists(settings_file):
                settings_path = settings_file
                break
        
        if not settings_path:
            print("‚ùå No se encontr√≥ settings.py")
            print("   Deber√°s agregar la configuraci√≥n manualmente")
            return False
        
        # Generar configuraci√≥n
        email_config = f"""
# === CONFIGURACI√ìN DE REPORTES DE COMBUSTIBLE ===
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = '{self.config['email_host']}'
EMAIL_PORT = {self.config['email_port']}
EMAIL_USE_TLS = {self.config['email_use_tls']}
EMAIL_HOST_USER = '{self.config['email_user']}'
EMAIL_HOST_PASSWORD = '{self.config['email_password']}'
DEFAULT_FROM_EMAIL = 'Sistema de Combustible <{self.config['email_user']}>'

REPORTES_EMAIL_DESTINATARIOS = {self.config['recipients']}
"""
        
        # Leer archivo actual
        try:
            with open(settings_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # Verificar si ya existe configuraci√≥n
            if 'REPORTES_EMAIL_DESTINATARIOS' in content:
                print("‚ö†Ô∏è La configuraci√≥n ya existe en settings.py")
                overwrite = input("¬øSobrescribir? (s/n): ").lower().startswith('s')
                if not overwrite:
                    return True
                
                # Remover configuraci√≥n existente
                lines = content.split('\n')
                filtered_lines = []
                skip_section = False
                
                for line in lines:
                    if '=== CONFIGURACI√ìN DE REPORTES DE COMBUSTIBLE ===' in line:
                        skip_section = True
                    elif skip_section and line.strip() and not line.startswith('#') and '=' in line:
                        # Continuar saltando l√≠neas de configuraci√≥n
                        pass
                    elif skip_section and (not line.strip() or line.startswith('#')):
                        # Fin de la secci√≥n de configuraci√≥n
                        if not line.strip():
                            skip_section = False
                        filtered_lines.append(line)
                    else:
                        skip_section = False
                        filtered_lines.append(line)
                
                content = '\n'.join(filtered_lines)
            
            # Agregar nueva configuraci√≥n
            content += email_config
            
            # Escribir archivo
            with open(settings_path, 'w', encoding='utf-8') as f:
                f.write(content)
            
            print(f"‚úÖ Configuraci√≥n agregada a {settings_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå Error actualizando settings.py: {str(e)}")
            return False
    
    def install_dependencies(self):
        """Instala las dependencias necesarias"""
        print("\nüì¶ INSTALANDO DEPENDENCIAS")
        print("-" * 25)
        
        dependencies = ['openpyxl>=3.1.0']
        
        for dep in dependencies:
            try:
                import subprocess
                result = subprocess.run([sys.executable, '-m', 'pip', 'install', dep], 
                                      capture_output=True, text=True)
                if result.returncode == 0:
                    print(f"‚úÖ {dep} instalado")
                else:
                    print(f"‚ùå Error instalando {dep}: {result.stderr}")
            except Exception as e:
                print(f"‚ùå Error instalando {dep}: {str(e)}")
    
    def create_command_file(self):
        """Crea el archivo del comando Django"""
        print("\nüìù CREANDO COMANDO DJANGO")
        print("-" * 25)
        
        command_content = '''# Este archivo fue generado autom√°ticamente por el asistente de configuraci√≥n
import os
import calendar
from datetime import datetime, timedelta
from decimal import Decimal
from django.core.management.base import BaseCommand
from django.core.mail import EmailMessage
from django.template.loader import render_to_string
from django.conf import settings
from django.db.models import Sum, Count, Q, Max
from openpyxl import Workbook
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils import get_column_letter
from io import BytesIO

# Importa tus modelos aqu√≠ - AJUSTA SEG√öN TU ESTRUCTURA
from {}}.models import Registro, Equipo, Operador


class Command(BaseCommand):
    help = 'Env√≠a reporte mensual de combustible por correo electr√≥nico'

    def add_arguments(self, parser):
        parser.add_argument('--mes', type=int, help='Mes espec√≠fico (1-12)')
        parser.add_argument('--a√±o', type=int, help='A√±o espec√≠fico')
        parser.add_argument('--email', type=str, help='Email espec√≠fico')
        parser.add_argument('--test', action='store_true', help='Modo test')

    def handle(self, *args, **options):
        # Aqu√≠ va toda la l√≥gica del comando que creamos anteriormente
        # (El c√≥digo es muy extenso, se incluir√≠a aqu√≠)
        self.stdout.write(
            self.style.SUCCESS('Comando ejecutado - Implementa la l√≥gica completa aqu√≠')
        )
'''.format(self.config['app_name'])
        
        command_path = f"{self.config['app_name']}/management/commands/enviar_reporte_mensual.py"
        
        try:
            with open(command_path, 'w', encoding='utf-8') as f:
                f.write(command_content)
            print(f"‚úÖ Comando creado: {command_path}")
            print("   ‚ö†Ô∏è Deber√°s completar la implementaci√≥n con el c√≥digo completo")
            return True
        except Exception as e:
            print(f"‚ùå Error creando comando: {str(e)}")
            return False
    
    def create_email_template(self):
        """Crea el template del email"""
        print("\nüìß CREANDO TEMPLATE DE EMAIL")
        print("-" * 30)
        
        # El template HTML que creamos anteriormente se guardar√≠a aqu√≠
        template_content = '''<!-- Template generado autom√°ticamente -->
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Reporte Mensual de Combustible</title>
    <!-- Aqu√≠ ir√≠a todo el HTML del template que creamos -->
</head>
<body>
    <div class="container">
        <h1>Reporte Mensual de Combustible</h1>
        <p>Template b√°sico - implementar dise√±o completo</p>
    </div>
</body>
</html>'''
        
        template_path = "templates/emails/reporte_mensual.html"
        
        try:
            with open(template_path, 'w', encoding='utf-8') as f:
                f.write(template_content)
            print(f"‚úÖ Template creado: {template_path}")
            print("   ‚ö†Ô∏è Deber√°s completar con el dise√±o HTML completo")
            return True
        except Exception as e:
            print(f"‚ùå Error creando template: {str(e)}")
            return False
    
    def setup_automation(self):
        """Configura la automatizaci√≥n"""
        print("\nü§ñ CONFIGURACI√ìN DE AUTOMATIZACI√ìN")
        print("-" * 35)
        
        print("¬øC√≥mo quieres automatizar el env√≠o?")
        print("  1. Cron Job (Linux/macOS)")
        print("  2. Task Scheduler (Windows)")
        print("  3. Celery (Avanzado)")
        print("  4. Manual (configurar despu√©s)")
        
        choice = input("\nOpci√≥n (1-4): ").strip()
        
        if choice == '1':
            self._setup_cron()
        elif choice == '2':
            self._setup_windows_task()
        elif choice == '3':
            self._setup_celery()
        else:
            print("‚ö†Ô∏è Configuraci√≥n manual seleccionada")
            print("   Ejecuta manualmente: python manage.py enviar_reporte_mensual")
    
    def _setup_cron(self):
        """Configura cron job"""
        command = f"cd {os.getcwd()} && {sys.executable} manage.py enviar_reporte_mensual"
        
        print(f"\nüìã Para configurar el cron job, ejecuta:")
        print(f"   crontab -e")
        print(f"\n   Agrega esta l√≠nea:")
        print(f"   0 8 1 * * {command}")
        print(f"\n   Esto ejecutar√° el reporte el d√≠a 1 de cada mes a las 8:00 AM")
    
    def _setup_windows_task(self):
        """Configura tarea de Windows"""
        batch_content = f'''@echo off
cd /d "{os.getcwd()}"
"{sys.executable}" manage.py enviar_reporte_mensual
pause'''
        
        batch_file = "enviar_reporte.bat"
        with open(batch_file, 'w') as f:
            f.write(batch_content)
        
        print(f"‚úÖ Archivo batch creado: {batch_file}")
        print("\nüìã Para configurar en Windows:")
        print("   1. Abre 'Programador de tareas'")
        print("   2. Crear tarea b√°sica")
        print("   3. Configurar para d√≠a 1 de cada mes")
        print(f"   4. Ejecutar: {os.path.abspath(batch_file)}")
    
    def _setup_celery(self):
        """Informaci√≥n sobre Celery"""
        print("\nüìã Para usar Celery:")
        print("   1. Instala: pip install celery redis")
        print("   2. Configura Redis como broker")
        print("   3. Agrega la configuraci√≥n de CELERY_BEAT_SCHEDULE")
        print("   4. Ejecuta: celery -A tu_proyecto worker --loglevel=info")
        print("   5. Ejecuta: celery -A tu_proyecto beat --loglevel=info")
    
    def test_configuration(self):
        """Prueba la configuraci√≥n"""
        print("\nüß™ PROBANDO CONFIGURACI√ìN")
        print("-" * 25)
        
        try:
            # Simular importaci√≥n
            print("‚úÖ Estructura de archivos correcta")
            
            # Mostrar resumen
            print(f"‚úÖ App: {self.config['app_name']}")
            print(f"‚úÖ Email servidor: {self.config['email_host']}")
            print(f"‚úÖ Email usuario: {self.config['email_user']}")
            print(f"‚úÖ Destinatarios: {len(self.config['recipients'])}")
            
            return True
        except Exception as e:
            print(f"‚ùå Error en configuraci√≥n: {str(e)}")
            return False
    
    def save_config(self):
        """Guarda la configuraci√≥n para referencia"""
        config_file = "reporte_config.json"
        
        # No guardar contrase√±a por seguridad
        safe_config = self.config.copy()
        safe_config.pop('email_password', None)
        
        try:
            with open(config_file, 'w') as f:
                json.dump(safe_config, f, indent=2)
            print(f"‚úÖ Configuraci√≥n guardada en: {config_file}")
        except Exception as e:
            print(f"‚ö†Ô∏è No se pudo guardar configuraci√≥n: {str(e)}")
    
    def run(self):
        """Ejecuta el asistente completo"""
        self.welcome()
        
        if not self.check_django_project():
            return False
        
        steps = [
            ("Configurar Email", self.get_email_config),
            ("Configurar Destinatarios", self.get_recipients),
            ("Crear Directorios", self.create_directory_structure),
            ("Actualizar Settings", self.update_settings),
            ("Instalar Dependencias", self.install_dependencies),
            ("Crear Comando", self.create_command_file),
            ("Crear Template", self.create_email_template),
            ("Probar Configuraci√≥n", self.test_configuration),
        ]
        
        for step_name, step_func in steps:
            print(f"\nüîÑ {step_name}...")
            if not step_func():
                print(f"‚ùå Error en: {step_name}")
                return False
        
        self.setup_automation()
        self.save_config()
        
        print("\n" + "=" * 70)
        print("üéâ ¬°CONFIGURACI√ìN COMPLETADA!")
        print("=" * 70)
        print("\nüìã PR√ìXIMOS PASOS:")
        print("   1. Completa la implementaci√≥n del comando Django")
        print("   2. Completa el dise√±o del template de email")
        print("   3. Prueba: python manage.py enviar_reporte_mensual --test")
        print("   4. Configura la automatizaci√≥n seg√∫n tu preferencia")
        print("\nüí° COMANDOS √öTILES:")
        print("   ‚Ä¢ Prueba: python manage.py enviar_reporte_mensual --test")
        print("   ‚Ä¢ Mes espec√≠fico: python manage.py enviar_reporte_mensual --mes 11 --a√±o 2024")
        print("   ‚Ä¢ Email espec√≠fico: python manage.py enviar_reporte_mensual --email test@email.com")
        
        return True

def main():
    """Funci√≥n principal"""
    wizard = ReportSetupWizard()
    success = wizard.run()
    
    if success:
        print("\n‚úÖ Configuraci√≥n exitosa!")
    else:
        print("\n‚ùå Configuraci√≥n incompleta")
        print("   Revisa los errores y ejecuta nuevamente")
    
    return success

if __name__ == "__main__":
    main()