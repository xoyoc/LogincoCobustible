"""
Django settings for combustible project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from decouple import config
import tempfile
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
env = environ.Env()
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['squid-app-5j4xm.ondigitalocean.app','127.0.0.1']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'crispy_tailwind',
    'equipo',
    'operador',
    'registros',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

]

ROOT_URLCONF = 'combustible.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'combustible.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default':env.db('DJANGO_DB_URL')
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'es-mx'

TIME_ZONE = 'America/Mexico_City'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_ROOT  = Path.joinpath(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'
STATICFILES_DIRS = [Path.joinpath(BASE_DIR, 'static'), ]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

CRISPY_ALLOWED_TEMPLATE_PACKS = "tailwind"

CRISPY_TEMPLATE_PACK = "tailwind"

CSRF_TRUSTED_ORIGINS = ['https://squid-app-5j4xm.ondigitalocean.app','https://127.0.0.1']
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True

STATICFILES_FINDERS = [
    # ...
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
    # ...
]

TEMP_DIR = tempfile.gettempdir()

# Configuración de Email
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'apikey'
EMAIL_HOST_PASSWORD = env.str('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = 'Sistema de Combustible <notificaciones@loginco.com.mx>'

# Destinatarios del reporte
REPORTES_EMAIL_DESTINATARIOS = [
    'zuly.becerra@loginco.com.mx',
    'f.suarez@loginco.com.mx',
    'xoyoc_l2@hotmail.com',
]

# === CONFIGURACIÓN DE DIGITALOCEAN SPACES ===
# Configuración base
AWS_ACCESS_KEY_ID = config('DO_SPACES_ACCESS_KEY')
AWS_SECRET_ACCESS_KEY = config('DO_SPACES_SECRET_KEY')
AWS_STORAGE_BUCKET_NAME = config('DO_SPACES_BUCKET_NAME')
AWS_S3_ENDPOINT_URL = config('DO_SPACES_ENDPOINT_URL')  # ej: https://nyc3.digitaloceanspaces.com
AWS_S3_REGION_NAME = config('DO_SPACES_REGION', default='nyc3')

# Configuración adicional
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',  # Cache por 24 horas
}

# Configuración de permisos
AWS_DEFAULT_ACL = 'public-read'
AWS_S3_FILE_OVERWRITE = False
AWS_QUERYSTRING_AUTH = False

# Configuración de URLs personalizadas (opcional)
AWS_S3_CUSTOM_DOMAIN = config('DO_SPACES_CDN_ENDPOINT', default=None)  # CDN opcional
if AWS_S3_CUSTOM_DOMAIN:
    AWS_S3_URL_PROTOCOL = 'https:'

# === CONFIGURACIÓN DE ARCHIVOS ESTÁTICOS ===
# Backend de almacenamiento para archivos estáticos
STATICFILES_STORAGE = 'storages.backends.s3boto3.StaticS3Boto3Storage'

# Configuración específica para static files
AWS_STATIC_LOCATION = 'static'
STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN or AWS_STORAGE_BUCKET_NAME}.{AWS_S3_ENDPOINT_URL.replace("https://", "")}/{AWS_STATIC_LOCATION}/'

# === CONFIGURACIÓN DE ARCHIVOS MEDIA ===
# Backend de almacenamiento para archivos media (fotos de tickets)
DEFAULT_FILE_STORAGE = 'combustible.storage_backends.MediaStorage'  # Clase personalizada

# Configuración específica para media files
AWS_MEDIA_LOCATION = 'media'
MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN or AWS_STORAGE_BUCKET_NAME}.{AWS_S3_ENDPOINT_URL.replace("https://", "")}/{AWS_MEDIA_LOCATION}/'

# === CONFIGURACIÓN DE SEGURIDAD ===
# Headers de seguridad
AWS_S3_OBJECT_PARAMETERS.update({
    'ContentDisposition': 'inline',
    'ContentLanguage': 'es',
})

# === CONFIGURACIÓN CONDICIONAL (DESARROLLO VS PRODUCCIÓN) ===
if config('USE_SPACES', default=False, cast=bool):
    # En producción usar Spaces
    print("📦 Usando DigitalOcean Spaces para archivos")
else:
    # En desarrollo usar almacenamiento local
    STATIC_URL = '/static/'
    MEDIA_URL = '/media/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    print("📁 Usando almacenamiento local para archivos")

FILE_UPLOAD_HANDLERS = [
    'django.core.files.uploadhandler.TemporaryFileUploadHandler',
]
# === CONFIGURACIÓN PARA REPORTES ===
# Directorio específico para archivos temporales de reportes
REPORTES_TEMP_DIR = 'reportes/temp'
REPORTES_STORAGE_LOCATION = 'reportes'

# === CONFIGURACIÓN ADICIONAL PARA SETTINGS.PY ===
"""
# Agregar a settings.py para configuración completa:

# WhatsApp Business API Configuration
WHATSAPP_PHONE_NUMBER_ID = config('WHATSAPP_PHONE_NUMBER_ID', default='')
WHATSAPP_ACCESS_TOKEN = config('WHATSAPP_ACCESS_TOKEN', default='')
WHATSAPP_VERIFY_TOKEN = config('WHATSAPP_VERIFY_TOKEN', default='whatsapp_webhook_verify')

# Configuración de webhook
WHATSAPP_WEBHOOK_URL = config('WHATSAPP_WEBHOOK_URL', default='/webhook/whatsapp/')

# Configuración de plantillas
WHATSAPP_TEMPLATES = {
    'monthly_report': 'monthly_report_notification',
    'inactive_alert': 'inactive_operators_alert',
}

# Límites de envío
WHATSAPP_DAILY_LIMIT = 1000  # Mensajes por día
WHATSAPP_RATE_LIMIT = 20     # Mensajes por minuto

# Logging específico para WhatsApp
LOGGING['loggers']['whatsapp'] = {
    'handlers': ['file', 'console'],
    'level': 'INFO',
    'propagate': True,
}
"""